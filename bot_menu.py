import asyncio
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# üìå –î–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DB_URL = "postgresql://neondb_owner:npg_dhwrDX6O1keB@ep-round-star-a9r38wl3-pooler.gwc.azure.neon.tech/neondb"

# üìå –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
async def fetch_data(query):
    conn = await asyncpg.connect(DB_URL)
    rows = await conn.fetch(query)
    await conn.close()
    return rows

# üìå –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [['‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'],
                ['üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'üîô –ù–∞–∑–∞–¥'],
                ['–ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞']]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ß—ñ–Ω–∞–∑–µ—Å! –ü—Ä–æ—Å—Ç–æ —ñ–º–±–æ–≤–æ —â–æ —Ç–∏ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ë—É–¥–µ–º–æ —á—ñ–ª–∏—Ç–∏—Å—è —Ä–∞–∑–æ–º", reply_markup=reply_markup)

# üìå –ú–µ–Ω—é "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [[InlineKeyboardButton("üìã –ú–∞—Ä–∫–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤", callback_data='brands')],
                [InlineKeyboardButton("‚ùÑÔ∏è –¢–∏–ø–∏ —Ñ—Ä–µ–æ–Ω—ñ–≤", callback_data='freon')]]
#                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", reply_markup=reply_markup)

# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–∞—Ä–æ–∫ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤
async def get_brands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    brands = await fetch_data("SELECT name FROM cond_brand")  # –ó–∞–ø–∏—Ç –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
    brands_list = "\n".join([f"‚úÖ {b['name']}" for b in brands]) if brands else "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    await update.callback_query.message.reply_text(f"üìã **–ú–∞—Ä–∫–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:**\n{brands_list}", parse_mode="Markdown")

# üìå –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ñ—Ä–µ–æ–Ω—ñ–≤
async def get_freon(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    freons = await fetch_data("SELECT name, chemical_name FROM freons")
    freon_list = "\n".join([f"‚ùÑÔ∏è {f['name']} ‚Äì {f['chemical_name']}" for f in freons]) if freons else "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    await update.callback_query.message.reply_text(f"‚ùÑÔ∏è **–¢–∏–ø–∏ —Ñ—Ä–µ–æ–Ω—ñ–≤:**\n{freon_list}", parse_mode="Markdown")

# üìå –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'brands':
        await get_brands(update, context)
    elif query.data == 'freon':
        await get_freon(update, context)
    elif query.data == 'back':
        await start(update, context)

# üìå –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        await info(update, context)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await update.message.reply_text("‚öôÔ∏è –¢—É—Ç –∫–æ–ª–∏—Å—å –ø–ª–∞–Ω—É—é—Ç—å—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    elif text == "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞":
        await update.message.reply_text("üìû –ù—É –º–æ–∂–µ –∫–æ–ª–∏—Å—å —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ, –∞–ª–µ –∑–∞—Ä–∞–∑ –≤—Å–µ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏")
    elif text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
    elif text == "–ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞":
        await update.message.reply_text("–Ø–∫—â–æ –≤–æ–Ω–∞ –≤–µ–ª–∏–∫–∞, —Ç–æ —Ü–µ –Ω–µ –æ–∑–Ω–∞—á–∞—î —â–æ —ó—ó –Ω–∞–¥–∞ —Ç–∏—Ü—è—Ç–∏. –ü–æ–Ω?")

# üìå –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = Application.builder().token("8177185933:AAGvnm0JmuTxucr8VqU0nzGd4WrNkn5VHpU").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == '__main__':
    main()
