import asyncio
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters, CallbackContext
import logging
import os
from flask import Flask, request

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("debug.log"),
                        logging.StreamHandler()
                    ])
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –î–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
DB_URL = "postgresql://neondb_owner:npg_dhwrDX6O1keB@ep-round-star-a9r38wl3-pooler.gwc.azure.neon.tech/neondb"

# –§—É–Ω–∫—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
async def fetch_data(query):
    try:
        conn = await asyncpg.connect(DB_URL)
        rows = await conn.fetch(query)
        await conn.close()
        return rows
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
        return []

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def start(update: Update, context: CallbackContext) -> None:
    keyboard = [['‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'],
                ['üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'üîô –ù–∞–∑–∞–¥'],
                ['–ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–ß—ñ–Ω–∞–∑–µ—Å! –ü—Ä–æ—Å—Ç–æ —ñ–º–±–æ–≤–æ —â–æ —Ç–∏ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è. –ë—É–¥–µ–º–æ —á—ñ–ª–∏—Ç–∏—Å—è —Ä–∞–∑–æ–º", reply_markup=reply_markup)

# –ú–µ–Ω—é "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
def info(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("üìã –ú–∞—Ä–∫–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤", callback_data='brands')],
                [InlineKeyboardButton("‚ùÑÔ∏è –¢–∏–ø–∏ —Ñ—Ä–µ–æ–Ω—ñ–≤", callback_data='freon')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:", reply_markup=reply_markup)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–∞—Ä–æ–∫ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤
async def get_brands(update: Update, context: CallbackContext) -> None:
    brands = await fetch_data("SELECT name FROM cond_brand")
    brands_list = "\n".join([f"‚úÖ {b['name']}" for b in brands]) if brands else "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    update.callback_query.message.reply_text(f"üìã **–ú–∞—Ä–∫–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:**\n{brands_list}", parse_mode="Markdown")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ñ—Ä–µ–æ–Ω—ñ–≤
async def get_freon(update: Update, context: CallbackContext) -> None:
    freons = await fetch_data("SELECT name, chemical_name FROM freons")
    freon_list = "\n".join([f"‚ùÑÔ∏è {f['name']} ‚Äì {f['chemical_name']}"] for f in freons) if freons else "‚ùå –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ."
    update.callback_query.message.reply_text(f"‚ùÑÔ∏è **–¢–∏–ø–∏ —Ñ—Ä–µ–æ–Ω—ñ–≤:**\n{freon_list}", parse_mode="Markdown")

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'brands':
        asyncio.run(get_brands(update, context))
    elif query.data == 'freon':
        asyncio.run(get_freon(update, context))
    elif query.data == 'back':
        start(update, context)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def message_handler(update: Update, context: CallbackContext) -> None:
    text = update.message.text

    if text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        info(update, context)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        update.message.reply_text("‚öôÔ∏è –¢—É—Ç –∫–æ–ª–∏—Å—å –ø–ª–∞–Ω—É—é—Ç—å—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    elif text == "üìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞":
        update.message.reply_text("üìû –ù—É –º–æ–∂–µ –∫–æ–ª–∏—Å—å —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ, –∞–ª–µ –∑–∞—Ä–∞–∑ –≤—Å–µ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏")
    elif text == "üîô –ù–∞–∑–∞–¥":
        start(update, context)
    elif text == "–ü—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞":
        update.message.reply_text("–Ø–∫—â–æ –≤–æ–Ω–∞ –≤–µ–ª–∏–∫–∞, —Ç–æ —Ü–µ –Ω–µ –æ–∑–Ω–∞—á–∞—î —â–æ —ó—ó –Ω–∞–¥–∞ —Ç–∏—Ü—è—Ç–∏. –ü–æ–Ω?")

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    updater = Updater(token="8177185933:AAGvnm0JmuTxucr8VqU0nzGd4WrNkn5VHpU", use_context=True)

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_callback))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, message_handler))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    updater.start_polling()
    updater.idle()

@app.route('/')
def index():
    return "Telegram Bot is running."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        update = Update.de_json(request.get_json(force=True), updater.bot)
        dispatcher.process_update(update)
        return 'ok', 200

if __name__ == '__main__':
    main()
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))